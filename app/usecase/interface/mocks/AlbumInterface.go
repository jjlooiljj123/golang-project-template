// Code generated by mockery v2.52.4. DO NOT EDIT.

package mocks

import (
	dto "boilerplate/app/domain/dto"
	entity "boilerplate/app/domain/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AlbumInterface is an autogenerated mock type for the AlbumInterface type
type AlbumInterface struct {
	mock.Mock
}

// CreateAlbum provides a mock function with given fields: ctx, album
func (_m *AlbumInterface) CreateAlbum(ctx context.Context, album entity.Album) (string, error) {
	ret := _m.Called(ctx, album)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlbum")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Album) (string, error)); ok {
		return rf(ctx, album)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Album) string); ok {
		r0 = rf(ctx, album)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Album) error); ok {
		r1 = rf(ctx, album)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlbumByID provides a mock function with given fields: ctx, id
func (_m *AlbumInterface) GetAlbumByID(ctx context.Context, id string) (dto.Album, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetAlbumByID")
	}

	var r0 dto.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (dto.Album, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) dto.Album); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.Album)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAlbums provides a mock function with given fields: ctx
func (_m *AlbumInterface) GetAllAlbums(ctx context.Context) ([]dto.Album, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllAlbums")
	}

	var r0 []dto.Album
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Album, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Album); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Album)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFromThirdPartyAPI provides a mock function with given fields: ctx
func (_m *AlbumInterface) GetFromThirdPartyAPI(ctx context.Context) ([]dto.Post, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFromThirdPartyAPI")
	}

	var r0 []dto.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.Post, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAlbumInterface creates a new instance of AlbumInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlbumInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlbumInterface {
	mock := &AlbumInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
