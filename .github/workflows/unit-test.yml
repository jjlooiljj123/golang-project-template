name: Go CI

# FOR SHOWCASE ONLY
# Workflow-level environment variables (available to all jobs)
env:
  GO_VERSION: "1.23" # Sample: Default Go version for the workflow
  APP_NAME: "album" # Sample: Name of your app, reused across jobs

on:
  push:
    branches:
      - "*"
  workflow_dispatch: # Adds manual trigger option

jobs:
  # # revisit lint
  # lint:
  #   name: Run Linting
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Check out the repository code
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     # Set up Go environment
  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: "1.21" # Adjust to your Go version

  #     # Install golangci-lint
  #     - name: Install golangci-lint
  #       run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

  #     # Run linting
  #     - name: Lint
  #       run: $(go env GOPATH)/bin/golangci-lint run ./... --verbose

  test:
    name: Run Unit Tests
    # Use the latest Ubuntu runner (GitHub-hosted virtual machine)
    runs-on: ubuntu-latest
    # FOR SHOWCASE ONLY
    # Job-level environment variables (available to all steps in this job)
    env:
      TEST_TIMEOUT: "5m" # Sample: Timeout for running tests
    # Steps to execute
    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4
      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }} # Uses workflow-level env var
      # - name: Cache Go Modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }} # A hash of all go.sum files in the repo, ensuring the cache invalidates when dependencies change.
      #     restore-keys: ${{ runner.os }}-go-
      # Step 3: Install dependencies (optional, if your project uses modules)
      - name: Get Dependencies
        run: go mod download
      # Step 4: Run unit tests
      - name: Run Tests
        # run: go test ./... -v
        run: go test ./... -v -timeout ${{ env.TEST_TIMEOUT }} # Uses job-level env var

  build:
    name: Build Project
    runs-on: ubuntu-latest
    # needs: [lint, test] # Build only runs if lint and test succeed succeeds
    needs: [test] # Build only runs if lint and test succeed succeeds
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    # Job-level environment variables
    env:
      BUILD_DIR: "bin" # Sample: Directory for build output
    steps:
      # Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }} # Uses workflow-level env var

      # - name: Cache Go Modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/go/pkg/mod
      #     key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }} # A hash of all go.sum files in the repo, ensuring the cache invalidates when dependencies change.
      #     restore-keys: ${{ runner.os }}-go-

      # Install dependencies
      - name: Get Dependencies
        run: go mod download

      # Build the project
      - name: Build
        # run: go build -v ./... # build all
        run: go build -v ./cmd/album

      - name: Publish Go filename
        id: publish
        # run: find album -type f -execdir echo '::set-output name=script-file::{}' ';'
        run: echo "script-file=album" >> $GITHUB_OUTPUT

      # Upload the built binary as an artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: album-binary
          path: |
            album

  deploy:
    name: Deploy Project
    runs-on: ubuntu-latest
    needs: build # Deploy only runs if build succeeds
    steps:
      # Download the artifact from the build job
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: album-binary
          path: deploy/

      # Output content
      - name: Output contents
        run: ls -lh deploy/
      - name: Output filesname
        run: echo "${{ needs.build.outputs.script-file }}"

      # # Make the binary executable (if needed)
      # - name: Set Execute Permissions
      #   run: chmod +x deploy/album

      # # Simulate deployment (replace with your actual deployment logic)
      # - name: Deploy
      #   run: |
      #     mkdir -p deploy/target
      #     mv deploy/album deploy/target/
      #     echo "Deployed album to deploy/target/"
      #     ls -lh deploy/target/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy
    # Conditional: Only run on push to main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: album-binary
          path: release/
      - name: Create Release Tag
        env:
          RELEASE_VERSION: "v1.0.0" # Could be dynamic, e.g., from BUILD_VERSION
        run: |
          echo "Creating release for ${{ env.APP_NAME }} version ${{ env.RELEASE_VERSION }}"
          ls -lh release/
          # Simulate tagging (uncomment to actually tag if you have permissions)
          # git tag ${{ env.RELEASE_VERSION }}
          # git push origin ${{ env.RELEASE_VERSION }}
      - name: Notify
        run: echo "Release ${{ env.RELEASE_VERSION }} created!"
